import os
import sys
import traceback
from datetime import datetime
import asyncio

from loguru import logger
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from data_manager import DataManager, get_msk_date_range
from text_preprocessing import TextPreprocessor
from lm_studio_client import LMStudioClient
from telegram_sender import TelegramSender
from token_estimator import TokenEstimator
from db_manager import DBManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
from post import Post

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="INFO")
logger.add("/app/logs/insightflow_{time}.log", rotation="10 MB", level="INFO")


class InsightFlow:
   def __init__(self):
       """
       –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å InsightFlow –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LM Studio
       """
       # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
       self.data_manager = DataManager()
       
       # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
       self.text_preprocessor = TextPreprocessor(
           similarity_threshold=0.65,
           min_content_length=100,
           max_tokens=50000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
       )
       
       # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LM Studio –∫–ª–∏–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ OpenRouter
       self.lm_client = LMStudioClient()
       self.telegram_sender = TelegramSender()
       self.token_estimator = TokenEstimator()

       # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
       try:
           self.db_manager = DBManager()
           self.db_manager.create_tables()
           logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
       except Exception as e:
           logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
           self.db_manager = None
       
       # RSS –º–µ–Ω–µ–¥–∂–µ—Ä
       self.rss_manager = None
       if hasattr(self.data_manager, 'rss_manager'):
           self.rss_manager = self.data_manager.rss_manager
           logger.info("RSS-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

   async def run_daily_job(self):
       """
       –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
       –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã —Å relevance=true –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
       """
       try:
           # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
           date_from, date_to = get_msk_date_range()
           
           logger.info(f"–ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {date_from} –ø–æ {date_to} (–ú–°–ö)")
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LM Studio
           if not await self.lm_client.test_connection():
               logger.error("LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–º–µ–Ω—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
               await self.telegram_sender.send_message(
                   "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω."
               )
               return
           
           # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –ë–î
           posts = []
           if self.db_manager:
               try:
                   # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å relevance=true –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                   db_posts = self.db_manager.get_posts_by_date_range(
                       date_from, date_to,
                       limit=None,
                       only_relevant=True,      # –¢–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
                       only_classified=True     # –¢–æ–ª—å–∫–æ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                   )
                   
                   if db_posts:
                       logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(db_posts)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                       
                       # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å–∏ –ë–î –≤ –æ–±—ä–µ–∫—Ç—ã Post
                       for db_post in db_posts:
                           post = Post(
                               post_id=db_post.post_id,
                               content=db_post.content,
                               blog_host=db_post.blog_host,
                               blog_host_type=db_post.blog_host_type,
                               published_on=db_post.published_on,
                               simhash=db_post.simhash,
                               url=db_post.url,
                               title=db_post.title
                           )
                           # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                           post.category = db_post.category
                           post.subcategory = db_post.subcategory
                           posts.append(post)
                       
                       # –°–æ–∑–¥–∞–µ–º post_mapping –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                       db_post_mapping = self.db_manager.create_post_mapping_from_db(db_posts)
                       logger.info(f"–°–æ–∑–¥–∞–Ω post_mapping –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å {len(db_post_mapping)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                   else:
                       logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                       await self.telegram_sender.send_message(
                           f"üìä –ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {date_from.strftime('%d.%m.%Y')} –ø–æ {date_to.strftime('%d.%m.%Y')} "
                           f"–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                       )
                       return
               except Exception as e:
                   logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                   logger.error(traceback.format_exc())
                   return
           else:
               logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
               return
           
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
           raw_file_path = await self.data_manager.save_posts_to_file(
               posts, date_from, "_relevant_classified"
           )
           if raw_file_path:
               logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {raw_file_path}")
           
           # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
           filtered_posts = self.text_preprocessor.process_posts(posts)

           if not filtered_posts:
               logger.warning("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
               await self.telegram_sender.send_message(
                   "üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
               )
               return

           logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_posts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π")

           # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
           filtered_file_path = await self.data_manager.save_posts_to_file(
               filtered_posts, date_from, "_filtered_final"
           )
           if filtered_file_path:
               logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filtered_file_path}")
           
           # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ LM Studio
           posts_data = []
           for post in filtered_posts:
               post_data = {
                   'post_id': post.post_id,
                   'title': post.title,
                   'content': post.content,
                   'blog_host': post.blog_host,
                   'url': post.url,
                   'category': getattr(post, 'category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                   'subcategory': getattr(post, 'subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
               }
               posts_data.append(post_data)
           
           # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é LM Studio
           logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(posts_data)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ LM Studio")
           analysis = await self.lm_client.analyze_and_summarize(posts_data, max_stories=10)
           
           if analysis:
               # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
               await self.telegram_sender.send_analysis(analysis, db_post_mapping)
               logger.info("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
               
               # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
               analysis_file_path = self.data_manager.data_dir / "analysis" / f"analysis_{date_from.strftime('%Y-%m-%d')}.txt"
               os.makedirs(os.path.dirname(analysis_file_path), exist_ok=True)
               
               with open(analysis_file_path, 'w', encoding='utf-8') as f:
                   f.write(f"–ê–Ω–∞–ª–∏–∑ –∑–∞ {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}\n")
                   f.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(filtered_posts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n")
                   f.write("="*50 + "\n\n")
                   f.write(analysis)
               
               logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {analysis_file_path}")
           else:
               logger.warning("–ê–Ω–∞–ª–∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ —É–¥–∞–ª—Å—è")
               await self.telegram_sender.send_message(
                   "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É LM Studio."
               )
       
       except Exception as e:
           logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
           logger.error(traceback.format_exc())
           
           # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
           await self.telegram_sender.send_message(
               f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n{str(e)[:200]}"
           )

   async def run_manual_job(self, date_from, date_to):
       """
       –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
       
       Args:
           date_from: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
           date_to: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
       """
       try:
           logger.info(f"–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {date_from} –ø–æ {date_to}")
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LM Studio
           if not await self.lm_client.test_connection():
               logger.error("LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
               return None
           
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
           if self.db_manager:
               db_posts = self.db_manager.get_posts_by_date_range(
                   date_from, date_to,
                   only_relevant=True,
                   only_classified=True
               )
               
               if db_posts:
                   logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(db_posts)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                   
                   # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ë–î –≤ –æ–±—ä–µ–∫—Ç—ã Post
                   posts = []
                   for db_post in db_posts:
                       post = Post(
                           post_id=db_post.post_id,
                           content=db_post.content,
                           blog_host=db_post.blog_host,
                           blog_host_type=db_post.blog_host_type,
                           published_on=db_post.published_on,
                           simhash=db_post.simhash,
                           url=db_post.url,
                           title=db_post.title
                       )
                       post.category = db_post.category
                       post.subcategory = db_post.subcategory
                       posts.append(post)
                   
                   # –°–æ–∑–¥–∞–µ–º mapping –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                   post_mapping = self.db_manager.create_post_mapping_from_db(db_posts)
               else:
                   logger.warning("–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                   return None
           else:
               logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
               return None
           
           # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
           filtered_posts = self.text_preprocessor.process_posts(posts)
           
           if not filtered_posts:
               logger.warning("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
               return None
           
           # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
           posts_data = []
           for post in filtered_posts:
               post_data = {
                   'post_id': post.post_id,
                   'title': post.title,
                   'content': post.content,
                   'blog_host': post.blog_host,
                   'url': post.url,
                   'category': getattr(post, 'category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                   'subcategory': getattr(post, 'subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
               }
               posts_data.append(post_data)
           
           # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é LM Studio
           analysis = await self.lm_client.analyze_and_summarize(posts_data)
           
           if analysis:
               # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
               await self.telegram_sender.send_analysis(analysis, post_mapping)
               logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
               
               # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
               timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
               analysis_file_path = self.data_manager.data_dir / "analysis" / f"manual_analysis_{timestamp}.txt"
               os.makedirs(os.path.dirname(analysis_file_path), exist_ok=True)
               
               with open(analysis_file_path, 'w', encoding='utf-8') as f:
                   f.write(f"–†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to}\n")
                   f.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(filtered_posts)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n")
                   f.write("="*50 + "\n\n")
                   f.write(analysis)
               
               logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {analysis_file_path}")
               return analysis_file_path
           else:
               logger.warning("–†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ —É–¥–∞–ª—Å—è")
               return None
               
       except Exception as e:
           logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
           logger.error(traceback.format_exc())
           return None


# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–Ω–µ –∫–ª–∞—Å—Å–∞ InsightFlow
async def run_insight_flow():
   """
   –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   """
   try:
       service = InsightFlow()
       await service.run_daily_job()
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ InsightFlow: {e}")
       logger.error(traceback.format_exc())


if __name__ == "__main__":
   asyncio.run(run_insight_flow())