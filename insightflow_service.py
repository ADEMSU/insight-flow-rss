import os
import sys
import traceback
from datetime import datetime
import asyncio
import json

from loguru import logger
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from data_manager import DataManager, get_msk_date_range
from text_preprocessing import TextPreprocessor
from lm_studio_client import LMStudioClient
from telegram_sender import TelegramSender
from token_estimator import TokenEstimator
from db_manager import DBManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
from post import Post

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="INFO")
logger.add("/app/logs/insightflow_{time}.log", rotation="10 MB", level="INFO")


class InsightFlow:
   def __init__(self):
       self.data_manager = DataManager()
       self.text_preprocessor = TextPreprocessor(
           similarity_threshold=0.65,
           min_content_length=100,
           max_tokens=50000
       )
       self.lm_client = LMStudioClient()
       self.telegram_sender = TelegramSender()
       self.token_estimator = TokenEstimator()

       try:
           self.db_manager = DBManager()
           self.db_manager.create_tables()
           logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
       except Exception as e:
           logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
           self.db_manager = None

       self.rss_manager = getattr(self.data_manager, 'rss_manager', None)
       if self.rss_manager:
           logger.info("RSS-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

   async def run_daily_job(self):
       try:
           date_from, date_to = get_msk_date_range()
           logger.info(f"–ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {date_from} –ø–æ {date_to} (–ú–°–ö)")

           if not await self.lm_client.test_connection():
               logger.error("LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–º–µ–Ω—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
               await self.telegram_sender.send_message("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
               return

           posts = []
           if self.db_manager:
               try:
                   db_posts = self.db_manager.get_posts_by_date_range(
                       date_from, date_to, only_relevant=True, only_classified=True
                   )
                   if db_posts:
                       logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(db_posts)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                       for db_post in db_posts:
                           post = Post(
                               post_id=db_post.post_id,
                               content=db_post.content,
                               blog_host=db_post.blog_host,
                               blog_host_type=db_post.blog_host_type,
                               published_on=db_post.published_on,
                               simhash=db_post.simhash,
                               url=db_post.url,
                               title=db_post.title
                           )
                           post.category = db_post.category
                           post.subcategory = db_post.subcategory
                           posts.append(post)
                           logger.debug(f"–ü–æ—Å—Ç –∏–∑ –ë–î: post_id='{db_post.post_id}', url='{db_post.url[:50]}...'")
                       db_post_mapping = self.db_manager.create_post_mapping_from_db(db_posts)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ mapping –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                       if db_post_mapping:
                           sample_items = list(db_post_mapping.items())[:3]
                           for post_id, url in sample_items:
                               logger.debug(f"Sample mapping: post_id='{post_id}' -> url='{url}'")
                    

                       logger.info(f"–°–æ–∑–¥–∞–Ω post_mapping –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å {len(db_post_mapping)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                   else:
                       logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                       await self.telegram_sender.send_message(
                           f"üìä –ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {date_from.strftime('%d.%m.%Y')} –ø–æ {date_to.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
                       )
                       return
               except Exception as e:
                   logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –ë–î: {e}")
                   logger.error(traceback.format_exc())
                   return
           else:
               logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
               return

           raw_file_path = await self.data_manager.save_posts_to_file(posts, date_from, "_relevant_classified")
           if raw_file_path:
               logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {raw_file_path}")

           filtered_posts = self.text_preprocessor.process_posts(posts)
           if not filtered_posts:
               logger.warning("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
               await self.telegram_sender.send_message("üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
               return

           filtered_file_path = await self.data_manager.save_posts_to_file(filtered_posts, date_from, "_filtered_final")
           if filtered_file_path:
               logger.info(f"–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filtered_file_path}")

           posts_data = []
           for post in filtered_posts:
               post_data = {
                   'post_id': post.post_id,
                   'title': post.title,
                   'content': post.content,
                   'url': post.url,
                   'category': getattr(post, 'category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                   'subcategory': getattr(post, 'subcategory', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
                   'published_on': post.published_on
               }
               posts_data.append(post_data)
           
           logger.warning(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(posts_data)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
           for i, post_data in enumerate(posts_data[:3]):
                logger.warning(f"Post data {i}: {json.dumps(post_data, ensure_ascii=False)[:200]}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é LM Studio
           logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(posts_data)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ LM Studio")

           summaries = await self.lm_client.analyze_and_summarize(posts_data, max_stories=2)

           if summaries:
               await self.telegram_sender.send_analysis(summaries, db_post_mapping)
               logger.info("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")

               self.db_manager.update_post_summaries(summaries)
               logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

               analysis_file_path = self.data_manager.data_dir / "analysis" / f"analysis_{date_from.strftime('%Y-%m-%d')}.txt"
               os.makedirs(os.path.dirname(analysis_file_path), exist_ok=True)
               with open(analysis_file_path, 'w', encoding='utf-8') as f:
                   for idx, story in enumerate(summaries, 1):
                       f.write(f"–°—é–∂–µ—Ç {idx}: {story['title']}\n")
                       f.write(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {story['summary']}\n")
                       f.write(f"POST_ID: {story['post_id']}\n\n")
               logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {analysis_file_path}")
           else:
               logger.warning("–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
               await self.telegram_sender.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ LM Studio.")

       except Exception as e:
           logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_daily_job: {e}")
           logger.error(traceback.format_exc())
           await self.telegram_sender.send_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:\n{str(e)[:200]}")


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def run_insight_flow():
   try:
       service = InsightFlow()
       await service.run_daily_job()
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ InsightFlow: {e}")
       logger.error(traceback.format_exc())


if __name__ == "__main__":
   asyncio.run(run_insight_flow())
